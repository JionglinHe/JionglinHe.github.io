C51 COMPILER V9.51   FLASH                                                                 09/08/2019 13:51:41 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE FLASH
OBJECT MODULE PLACED IN ..\Hex\Flash.obj
COMPILER INVOKED BY: E:\keil5\Keil\C51\BIN\C51.EXE ..\..\..\Device driver\Flash\Flash.c OPTIMIZE(8,SPEED) BROWSE INCDIR(
                    -..\..\..\OSD;..\..\..\OSD\Logo;../../../Inc;../../../UserConfig;../../../ARKLib;../../../UserConfig/Prj config;..\..\..\
                    -LCD Pannels;..\..\..\LCD Pannels\LCD parameter;..\..\..\GetUserInput;..\..\..\GetUserInput\Ir;..\..\..\GetUserInput\Key;
                    -..\..\..\GetUserInput\GPIO;..\..\..\Device driver\AMT;..\..\..\Device driver\ArkChip;..\..\..\Device driver\Mcu;..\..\..
                    -\Device driver\Flash;..\..\..\Device driver\I2C;..\..\..\Device driver\E2prom;..\..\..\Device driver\WT5700;..\..\..\Dev
                    -ice driver\Kt0803l;..\..\..\Device driver\BT;..\..\..\Debug) DEBUG OBJECTEXTEND PRINT(..\List\Flash.lst) OBJECT(..\Hex\F
                    -lash.obj)

line level    source

   1          /****************************************************************************************************
   2          *Copyright (C) 2005 深圳艾科创新有限公司产品应用一部
   3          * All rights reserved.
   4          
   5          *File name: 　 Flash.c
   6          *Version:    　0.1
   7          *Author:       cjinzong
   8          *Finish date:  2008-09-03
   9          
  10          *Description:
  11          *           这个文件是对系统的主要参数进行保存到FLASH的函数定义。 
  12          
  13          *History:
  14          *
  15          ***************************************************************************************************/
  16          #define _FLASH_C_
  17          
  18          #include "DataType.h"
  19          #include "systemConfig.h"
  20          #include "global.h"
*** WARNING C245 IN LINE 12 OF E:\keil5\Keil\C51\Inc\intrins.h: unknown #pragma, line ignored
*** ERROR C263 IN LINE 36 OF E:\keil5\Keil\C51\Inc\intrins.h: save/restore: stack overflow/underflow
  21          #include "Flash.h"
  22          #include "debug.h"
  23          #include "AMT_REG.h"
  24          #include "AMT_Drv.h"
  25          #include "AMT_MCU.h"
  26          
  27          
  28          
  29          #ifdef FlashEn
  30          
  31          FLASH_COMD CODE Flash_comd[]=
  32          {
  33                  {0x39,0x20},
  34                  {0x06,0xD7},
  35                  {0x06,0xD8},
  36                  {0x06,0x20},
  37          };             
  38          
  39          /************************************************************************
  40          *name:       CheckIdle(void)
  41          *input:      non
  42          *output:     non
  43          *return:     void
  44          
  45          *description: 
  46                     这个函数是用来检测FLASH是否出于空闲状态
  47                             是：  退出
C51 COMPILER V9.51   FLASH                                                                 09/08/2019 13:51:41 PAGE 2   

  48                             不是：等待 
  49          *history:  
  50          *************************************************************************/
  51          void CheckIdle(void)
  52          {
  53   1          while(!(IDLE_DF&0x80));
  54   1      }
  55          
  56          
  57          void SoftwareBlockProtect(void)
  58          {
  59   1          CheckIdle();
  60   1              STATUS_DD = 0x00;
  61   1              CTRL_DE = FLASH_INT_EN;
  62   1              WRDATA_D1 = 0x0c;
  63   1              INSTR_D0  = 0x04;
  64   1              while(!STATUS_DD);
  65   1              CheckIdle();
  66   1      }
  67          
  68          void SoftwareBlockUnprotect(void)
  69          {
  70   1          CheckIdle();
  71   1              STATUS_DD = 0x00;
  72   1              CTRL_DE = FLASH_INT_EN;
  73   1              WRDATA_D1 = 0x00;
  74   1              INSTR_D0  = 0x04;
  75   1              while(!STATUS_DD);
  76   1              CheckIdle();
  77   1      }
  78          
  79          
  80          
  81          
  82          /************************************************************************
  83          *name:       WriteDisable(void)
  84          *input:      non
  85          *output:     non
  86          *return:     void
  87          *update:     20090927
  88          
  89          *description: 
  90                     这个函数是用来对FLASH写操作完毕后， 关闭写使能。让数据更稳定，安全。 
  91          *history:  
  92          *************************************************************************/
  93          void WriteDisable(void)
  94          {
  95   1              CheckIdle();
  96   1              CTRL_DE = FLASH_INT_EN; 
  97   1              ERASE_CMD_E4 = FLASH_WRITE_DISABLE_EN;  //burning-commond        lj 2008.09.09  
  98   1              INSTR_D0 = FLASH_ERASE_EN;      
  99   1              CheckIdle();
 100   1      }
 101          
 102          
 103          /************************************************************************
 104          *name:       void EnableFlashUnprotected(ULONG stAddr)
 105          *input:      stAddr   flash目标地址
 106          *output:     non
 107          *return:     void
 108          
 109          *description: 
C51 COMPILER V9.51   FLASH                                                                 09/08/2019 13:51:41 PAGE 3   

 110                    这个函数是用来使能flash unprotected sector.
 111          *history:  
 112          *************************************************************************/
 113          void EnableFlashUnprotected(ULONG stAddr)
 114          {
 115   1           while((stAddr != FLASH_DAT_ADDR)&&(stAddr != FLASH_COPY_ADDR))
 116   1           {
 117   2              _nop_();
 118   2           }
 119   1      
 120   1      
 121   1               if(FLASH_DAT_ADDR == stAddr)
 122   1               {
 123   2                              SoftwareBlockUnprotect();
 124   2      
 125   2                              CheckIdle();
 126   2                              CTRL_DE = FLASH_INT_EN;
 127   2                              STATUS_DD = FLASH_CLEAR_STATUS; 
 128   2      
 129   2                              FADDR_REG0_D6 = (UCHAR)FLASH_DAT_ADDR;
 130   2                              FADDR_REG1_D7 = (UCHAR)(FLASH_DAT_ADDR>>8);
 131   2                              FADDR_REG2_D8 = (UCHAR)(FLASH_DAT_ADDR>>16);
 132   2      
 133   2                              ERASE_CMD_E4 = g_sysSetting.Flash.unprotectedComd;   
 134   2                              INSTR_D0 = FLASH_ERASE_EN;
 135   2                              while(!(STATUS_DD));
 136   2                              CheckIdle();
 137   2               }
 138   1      
 139   1               if(FLASH_COPY_ADDR == stAddr)
 140   1               {
 141   2                              SoftwareBlockUnprotect();
 142   2      
 143   2                              CheckIdle();
 144   2                              CTRL_DE = FLASH_INT_EN;
 145   2                              STATUS_DD = FLASH_CLEAR_STATUS; 
 146   2      
 147   2                              FADDR_REG0_D6 = (UCHAR)FLASH_COPY_ADDR;
 148   2                              FADDR_REG1_D7 = (UCHAR)(FLASH_COPY_ADDR>>8);
 149   2                              FADDR_REG2_D8 = (UCHAR)(FLASH_COPY_ADDR>>16);
 150   2      
 151   2                              ERASE_CMD_E4 = g_sysSetting.Flash.unprotectedComd;   
 152   2                              INSTR_D0 = FLASH_ERASE_EN;
 153   2                              while(!(STATUS_DD));
 154   2                              CheckIdle();
 155   2               }
 156   1      }
 157          
 158          
 159          /************************************************************************
 160          *name:       void EraseFlashSector(ULONG stAddr)
 161          *input:      stAddr   flash目标地址
 162          *output:     non
 163          *return:     void
 164          
 165          *description: 
 166                    这个函数是用来使能flash unprotected sector.
 167          *history:  
 168          *************************************************************************/
 169          void EraseFlashSector(ULONG stAddr)
 170          {
 171   1      
C51 COMPILER V9.51   FLASH                                                                 09/08/2019 13:51:41 PAGE 4   

 172   1           while((stAddr != FLASH_DAT_ADDR)&&(stAddr != FLASH_COPY_ADDR))
 173   1           {
 174   2              _nop_();
 175   2           }
 176   1               
 177   1           if(FLASH_DAT_ADDR == stAddr)
 178   1           {
 179   2                              CheckIdle();
 180   2                              CTRL_DE = FLASH_INT_EN;
 181   2                              STATUS_DD = FLASH_CLEAR_STATUS; 
 182   2      
 183   2                              FADDR_REG0_D6 = (UCHAR)FLASH_DAT_ADDR;
 184   2                              FADDR_REG1_D7 = (UCHAR)(FLASH_DAT_ADDR>>8);
 185   2                              FADDR_REG2_D8 = (UCHAR)(FLASH_DAT_ADDR>>16);
 186   2      
 187   2                              ERASE_CMD_E4 = g_sysSetting.Flash.erase4kComd;
 188   2                              INSTR_D0 = FLASH_ERASE_EN;
 189   2                              while(!(STATUS_DD));
 190   2                              CheckIdle();
 191   2           }
 192   1      
 193   1               if(FLASH_COPY_ADDR == stAddr)
 194   1           {
 195   2                              CheckIdle();
 196   2                              CTRL_DE = FLASH_INT_EN;
 197   2                              STATUS_DD = FLASH_CLEAR_STATUS; 
 198   2      
 199   2                              FADDR_REG0_D6 = (UCHAR)FLASH_COPY_ADDR;
 200   2                              FADDR_REG1_D7 = (UCHAR)(FLASH_COPY_ADDR>>8);
 201   2                              FADDR_REG2_D8 = (UCHAR)(FLASH_COPY_ADDR>>16);
 202   2      
 203   2                              ERASE_CMD_E4 = g_sysSetting.Flash.erase4kComd;
 204   2                              INSTR_D0 = FLASH_ERASE_EN;
 205   2                              while(!(STATUS_DD));
 206   2                              CheckIdle();
 207   2           }
 208   1      }
 209          
 210          
 211          /************************************************************************
 212          *name:    ReadFlashSysPara(ULONG stAddr, UCHAR *pSysPara,UINT numOper)
 213          *input:   non   
 214          *output:  non  
 215          *return:  void 
 216          
 217          *description:   
 218                  这个函数是用来对flash的系统参数进行读取。 
 219          *history:  
 220          *************************************************************************/
 221          void ReadFlashSysPara(ULONG stAddr, UCHAR *pSysPara,UINT numOper)
 222          {
 223   1              UINT i;
 224   1              UCHAR j;
 225   1      
 226   1              WriteDisable();
 227   1          SoftwareBlockProtect();
 228   1              CheckIdle();    
 229   1              CTRL_DE = FLASH_INT_EN;                             
 230   1      
 231   1              for(i=0; i<numOper; i++)
 232   1              {
 233   2                  STATUS_DD = FLASH_CLEAR_STATUS;                  
C51 COMPILER V9.51   FLASH                                                                 09/08/2019 13:51:41 PAGE 5   

 234   2              
 235   2                  FADDR_REG0_D6 = (UCHAR)(stAddr);
 236   2                  FADDR_REG1_D7 = (UCHAR)(stAddr>>8);
 237   2                  FADDR_REG2_D8 = (UCHAR)(stAddr>>16);
 238   2      
 239   2                  INSTR_D0 = FLASH_READ_EN;                         //flash data read enable
 240   2      
 241   2                  for(j = 0; j < 20; j++)
 242   2                      {
 243   3                          if(STATUS_DD == FLASH_READ_END)
 244   3                              {
 245   4                                      pSysPara[i] = RDDATA_D2;
 246   4                                  break;
 247   4                              }
 248   3                      }
 249   2                  stAddr++;
 250   2                  CheckIdle();
 251   2              }
 252   1      }
 253          
 254          /************************************************************************
 255          *name:       WriteFlashSysData(ULONG stAddr,UINT ramdataAddr,UINT numOper)
 256          *input:      stAddr                   flash的目标地址
 257                       ramdataAddr                  Ram的源地址
 258                                   numOper                          写的数据的个数
 259          
 260          *output:     non
 261          *return:     void
 262          
 263          *description: 
 264                      这个模块是对读E2的保存参数到相应的系统空间
 265                                    1.系统参数
 266                                    2.频道的对应频点
 267                                    3.其他    
 268          *history:  
 269          *************************************************************************/
 270          void WriteFlashSysPara(ULONG stAddr,UINT ramdataAddr,UINT numOper)
 271          {   
 272   1              UINT  Length;
 273   1              UINT maxOperNum = 0xffff;                         //这个值的大小可以由FLASH的型号来决定       
 274   1              
 275   1              EnableFlashUnprotected(stAddr);
 276   1              EraseFlashSector(stAddr);
 277   1      
 278   1              while(numOper > 0)
 279   1              {
 280   2                  CheckIdle();
 281   2              
 282   2                  CTRL_DE = FLASH_INT_EN;                         
 283   2                  STATUS_DD = FLASH_CLEAR_STATUS;                  
 284   2              
 285   2                  FADDR_REG0_D6 = (UCHAR)stAddr;
 286   2                  FADDR_REG1_D7 = (UCHAR)(stAddr>>8);
 287   2                  FADDR_REG2_D8 = (UCHAR)(stAddr>>16);
 288   2      
 289   2                  DADDR_REG0_D9 = (UCHAR)ramdataAddr;
 290   2                  DADDR_REG1_DA = (UCHAR)(ramdataAddr/256);
 291   2                  DADDR_REG1_DA |= 0x80;                                                   //data ram
 292   2      
 293   2                  if(numOper <= maxOperNum)
 294   2                  {
 295   3                          Length = numOper;
C51 COMPILER V9.51   FLASH                                                                 09/08/2019 13:51:41 PAGE 6   

 296   3                  }
 297   2                  else
 298   2                  {
 299   3                          Length = maxOperNum;
 300   3                  }
 301   2      
 302   2              if(Length >= 256)   //每次写一个page
 303   2              {
 304   3                  Length = 256;
 305   3              }
 306   2      
 307   2                  LOAD_LENGTH0_DB = Length - 1;             
 308   2                  LOAD_LENGTH1_DC = 0;
 309   2      
 310   2                  INSTR_D0 = FLASH_PROGRAM_EN;
 311   2      
 312   2                  stAddr += Length;
 313   2                  ramdataAddr += Length;
 314   2                  numOper -= Length;
 315   2      
 316   2              }
 317   1              
 318   1              SoftwareBlockProtect();
 319   1              WriteDisable();
 320   1      }
 321          
 322          
 323          
 324          BOOL VerifyFlashDate(ULONG stAddr)
 325          {
 326   1          UCHAR XDATA i;
 327   1              
 328   1          for(i=0;i<3;i++)
 329   1          {
 330   2                      ReadFlashSysPara(stAddr, (UCHAR *)&g_sysSetting, sizeof(SysWorkParaType)); 
 331   2                      if((g_sysSetting.OXAA == 0xaa) && (g_sysSetting.OX55 == 0x55))
 332   2                      {
 333   3                           return TRUE;
 334   3                      }
 335   2          }
 336   1              return FALSE;
 337   1      }
 338          
 339          void AutoDetectFlashType(void)
 340          {
 341   1          UCHAR XDATA i;
 342   1              
 343   1              printfStr("AutoDetectFlashType");
 344   1      
 345   1          if(!VerifyFlashDate(FLASH_DAT_ADDR)) 
 346   1              {               
 347   2                  for(i=0;i<5;i++)
 348   2                  {
 349   3                 g_sysSetting.Flash.erase4kComd = Flash_comd[i].FLASH_ERASE_4K;
 350   3                 g_sysSetting.Flash.unprotectedComd = Flash_comd[i].FLASH_UNPROTECTED_EN;
 351   3                         g_sysSetting.OX55 = 0x55;
 352   3                         g_sysSetting.OXAA = 0xaa;
 353   3                         WriteFlashSysPara(FLASH_DAT_ADDR, (UCHAR *)&g_sysSetting, sizeof(SysWorkParaType));
 354   3                         if(VerifyFlashDate(FLASH_DAT_ADDR)) 
 355   3                         {
 356   4                                  EnableFlashUnprotected(FLASH_DAT_ADDR);
 357   4                                  EraseFlashSector(FLASH_DAT_ADDR);
C51 COMPILER V9.51   FLASH                                                                 09/08/2019 13:51:41 PAGE 7   

 358   4      
 359   4                                  if(!VerifyFlashDate(FLASH_DAT_ADDR))
 360   4                                      {   
 361   5                                          g_ucFlashTpye = i;
 362   5                                              break;
 363   5                                      }
 364   4                                      else
 365   4                                      { 
 366   5                                          g_ucFlashTpye = 0;
 367   5                                      }
 368   4                         }
 369   3                  }
 370   2              }
 371   1      }
 372          
 373          #endif
 374          

C51 COMPILATION COMPLETE.  1 WARNING(S),  1 ERROR(S)
